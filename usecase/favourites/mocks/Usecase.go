// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	favourites "injar/usecase/favourites"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, favouriteDomain
func (_m *Usecase) Delete(ctx context.Context, favouriteDomain *favourites.Domain) (*favourites.Domain, error) {
	ret := _m.Called(ctx, favouriteDomain)

	var r0 *favourites.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *favourites.Domain) *favourites.Domain); ok {
		r0 = rf(ctx, favouriteDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*favourites.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *favourites.Domain) error); ok {
		r1 = rf(ctx, favouriteDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *Usecase) GetByID(ctx context.Context, ID int) (favourites.Domain, error) {
	ret := _m.Called(ctx, ID)

	var r0 favourites.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) favourites.Domain); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(favourites.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID, page, limit
func (_m *Usecase) GetByUserID(ctx context.Context, userID int, page int, limit int) ([]favourites.Domain, int, error) {
	ret := _m.Called(ctx, userID, page, limit)

	var r0 []favourites.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) []favourites.Domain); ok {
		r0 = rf(ctx, userID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]favourites.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) int); ok {
		r1 = rf(ctx, userID, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, int) error); ok {
		r2 = rf(ctx, userID, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Store provides a mock function with given fields: ctx, favouriteDomain
func (_m *Usecase) Store(ctx context.Context, favouriteDomain *favourites.Domain) (favourites.Domain, error) {
	ret := _m.Called(ctx, favouriteDomain)

	var r0 favourites.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *favourites.Domain) favourites.Domain); ok {
		r0 = rf(ctx, favouriteDomain)
	} else {
		r0 = ret.Get(0).(favourites.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *favourites.Domain) error); ok {
		r1 = rf(ctx, favouriteDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
