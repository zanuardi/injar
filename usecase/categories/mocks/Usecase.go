// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	categories "injar/usecase/categories"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, categoriesDomain
func (_m *Usecase) Delete(ctx context.Context, categoriesDomain *categories.Domain) (*categories.Domain, error) {
	ret := _m.Called(ctx, categoriesDomain)

	var r0 *categories.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *categories.Domain) *categories.Domain); ok {
		r0 = rf(ctx, categoriesDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*categories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *categories.Domain) error); ok {
		r1 = rf(ctx, categoriesDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, page, perpage
func (_m *Usecase) FindAll(ctx context.Context, page int, perpage int) ([]categories.Domain, int, error) {
	ret := _m.Called(ctx, page, perpage)

	var r0 []categories.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []categories.Domain); ok {
		r0 = rf(ctx, page, perpage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]categories.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, page, perpage)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, perpage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAll provides a mock function with given fields: ctx
func (_m *Usecase) GetAll(ctx context.Context) ([]categories.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []categories.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []categories.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]categories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, categoryId
func (_m *Usecase) GetByID(ctx context.Context, categoryId int) (categories.Domain, error) {
	ret := _m.Called(ctx, categoryId)

	var r0 categories.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) categories.Domain); ok {
		r0 = rf(ctx, categoryId)
	} else {
		r0 = ret.Get(0).(categories.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, categoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, categoryName
func (_m *Usecase) GetByName(ctx context.Context, categoryName string) (categories.Domain, error) {
	ret := _m.Called(ctx, categoryName)

	var r0 categories.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) categories.Domain); ok {
		r0 = rf(ctx, categoryName)
	} else {
		r0 = ret.Get(0).(categories.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, categoryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, categoryDomain
func (_m *Usecase) Store(ctx context.Context, categoryDomain *categories.Domain) (categories.Domain, error) {
	ret := _m.Called(ctx, categoryDomain)

	var r0 categories.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *categories.Domain) categories.Domain); ok {
		r0 = rf(ctx, categoryDomain)
	} else {
		r0 = ret.Get(0).(categories.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *categories.Domain) error); ok {
		r1 = rf(ctx, categoryDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, newsDomain
func (_m *Usecase) Update(ctx context.Context, newsDomain *categories.Domain) (*categories.Domain, error) {
	ret := _m.Called(ctx, newsDomain)

	var r0 *categories.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *categories.Domain) *categories.Domain); ok {
		r0 = rf(ctx, newsDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*categories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *categories.Domain) error); ok {
		r1 = rf(ctx, newsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
